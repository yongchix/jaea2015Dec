#include <algorithm>
#include <iostream>
#include <iomanip>
#include <limits>
#include <sstream>
#include <stdexcept>
#include <signal.h>
#include <limits.h>

#include "PspmtProcessor.hpp"
#include "DammPlotIds.hpp"
#include "Globals.hpp"
#include "Messenger.hpp"
#include "JAEACorrelator.hpp"
#include "DetectorDriver.hpp"

using namespace std;
using namespace dammIds::pspmt;


namespace dammIds{
    namespace pspmt{      
      const int D_RAW1=0;
      const int D_RAW2=1;
      const int D_RAW3=2;
      const int D_RAW4=3;
      const int D_RAWD=4;
      const int D_SUM=5;
      const int DD_POS1_RAW=6;
      const int DD_POS2_RAW=7;
      const int DD_POS1=8;
      const int DD_POS2=9;
      
      const int D_ENERGY_TRACE1=10;
      const int D_ENERGY_TRACE2=11;
      const int D_ENERGY_TRACE3=12;
      const int D_ENERGY_TRACE4=13;
      const int D_ENERGY_TRACED=14;
      const int D_ENERGY_TRACESUM=15;
      const int DD_POS1_RAW_TRACE=16;
      const int DD_POS2_RAW_TRACE=17;
      const int DD_POS1_TRACE=18;
      const int DD_POS2_TRACE=19;
      
      const int D_QDC_TRACE1=20;
      const int D_QDC_TRACE2=21;
      const int D_QDC_TRACE3=22;
      const int D_QDC_TRACE4=23;
      const int D_QDC_TRACED=24;
      const int D_ENERGY_QDCSUM=25;
      const int DD_POS1_RAW_QDC=26;
      const int DD_POS1_QDC    =27;
      const int DD_DIRCAL1     =28;

      
      const int DD_P1D_CHANNEL=30;
      const int DD_P1D_TRACE=31;
      const int DD_P1D_QDC=32;
      const int DD_P1D_QDCSUM=33;
      
     
      const int DD_P1D_IMPLANT_CHE=35;
      const int DD_P1D_DECAY_CHE=36;
      const int DD_P1D_IMPLANT_QDC=37;
      const int DD_P1D_DECAY_QDC=38;

      const int DD_MAP_IMPLANT=39;
      const int DD_MAP_DECAY=40;

      const int DD_POS_RAW_PROC=44;
      const int DD_POS_RAW_IMPLANT=45;
      const int DD_POS_RAW_DECAY=46;
        
      // decay time granx plot, 50 to 60 occupied
      
      const int DD_ENERGY_DECAY_TIME_GRANX=50;
      const int DD_P1D_DECAY_TIME0=60;
      const int DD_P1D_DECAY_TIME1=61;
      const int DD_P1D_DECAY_TIME2=62;
      const int DD_P1D_DECAY_TIME3=63;
      const int DD_P1D_DECAY_TIME4=64;
      const int DD_P1D_DECAY_TIME5=65;

      const int D_RAW1PROC=70;
      const int D_RAW2PROC=71;
      const int D_RAW3PROC=72;
      const int D_RAW4PROC=73;
      const int D_RAWDPROC=74;
      const int D_DIFF    =75;

      const int DD_TRACE_E_QDC=76;
      
      const int DD_SINGLE_TRACE=77;
      const int DD_DOUBLE_TRACE=78;

      const int DD_TRACE_POS=79;
      const int DD_TRACE_DYNODE=80;
      
      const int DD_TRACE_IMPLANT_ALL=81;
      const int DD_TRACE_IMPLANT_DYNODE=82;
      const int DD_TRACE_IMPLANT_POSITION=83;
      const int DD_TRACE_IMPLANT_PILEUP=84;
     
      const int DD_TRACE_DECAY_ALL=85;
      const int DD_TRACE_DECAY_DYNODE=86;
      const int DD_TRACE_DECAY_POSITION=87;
      const int DD_TRACE_DECAY_PILEUP=88;
            
      const int DD_MWPC=89;
      const int DD_MWPC_PSPMT=90;
      const int DD_MWPC_NOPSPMT=91;
      const int DD_TRACE_SLOW=95;

      const int DD_CHE_REG=96;
      const int DD_QDC_REG=97;
      const int DD_QDC_REG_SEG=98;

      const int DD_QDC_REG_IMPLANT=99;
      const int DD_QDC_REG_DECAY=100;
      //const int DD_P1D_DECAY
      
      const int DD_QDC_REG_IMPLANT_SEG=101;
      const int DD_QDC_REG_DECAY_SEG=102;
      const int DD_REG12=103;
      const int DD_REG12_IMPLANT=104;
      const int DD_REG12_DECAY=105;
      
      const int DD_QDC_REG1=106;
      const int DD_QDC_REG2=107;

      const int DD_TRACE_HIGHENE=108;
      const int DD_TRACE_HIGHENE2=109;
      const int DD_TRACE_HIGHENE3=110;
      const int DD_ENE_QDC_DECAY=112;
      const int DD_ENE_QDC_IMPLANT=113;
      const int DD_TRACE_HIGHENE4=114;

      const int DD_P1D_QDCCAL=115;
      const int DD_QDCREG_SPECIFIC=116;

    }
}

void PspmtProcessor::PspmtData::Clear(void) {    
}

PspmtEvent::PspmtEvent(){
  ene_pspmt_  = -1.0;
  time_pspmt_ = -1.0;
  time_mwpc_  = -1.0;
  is_beam_    = false;
  is_decay_   = false;
  is_veto_    = false;
}

PspmtEvent::PspmtEvent(double ene_pspmt,double time_pspmt,double time_mwpc,bool is_beam,bool is_decay,bool is_veto){
  set_ene_pspmt(ene_pspmt);
  set_time_pspmt(time_pspmt);
  set_time_mwpc(time_mwpc);
  set_is_beam(is_beam);
  set_is_decay(is_decay);
  set_is_veto(is_veto);
}

PspmtProcessor::PspmtProcessor(void) : 
  EventProcessor(OFFSET, RANGE, "pspmt")
{
  associatedTypes.insert("pspmt");
  int size_x=24;
  int size_y=24;
  pixels_ = new deque<PspmtEvent>*[size_x];
  for(int i=0;i<size_x;i++){
    pixels_[i] = new deque<PspmtEvent>[size_y];
  }
}

PspmtProcessor::~PspmtProcessor(){
  
  int size_y=24;
  for(int i=0;i<size_y;i++){
    delete [] pixels_[i];
  }
  delete[] pixels_;
}

void PspmtProcessor::DeclarePlots(void) {
   
  const int posBins      = 32; 
  const int traceBins    = 256;
  const int timeBins     = 256;
  const int traceBins2   = 512;
  const int mapBins      = 800;
  const int p1dBins      = 1024;
  const int Bins         = 2500;
  const int energyBins   = 8192;
  const int regBins      = 2048;
  
  // Raw 0-29
    DeclareHistogram1D(D_RAW1, energyBins, "Pspmt1 Raw");
    DeclareHistogram1D(D_RAW2, energyBins, "Pspmt2 Raw");
    DeclareHistogram1D(D_RAW3, energyBins, "Pspmt3 Raw");
    DeclareHistogram1D(D_RAW4, energyBins, "Pspmt4 Raw");
    DeclareHistogram1D(D_RAWD, energyBins, "Pspmt Dynode");
    DeclareHistogram1D(D_SUM,  energyBins, "Pspmt Sum");
    DeclareHistogram2D(DD_POS1_RAW, mapBins, mapBins, "Pspmt Pos1 Raw");
    DeclareHistogram2D(DD_POS2_RAW, mapBins, mapBins, "Pspmt Pos2 Raw");
    DeclareHistogram2D(DD_POS1, posBins, posBins, "Pspmt Pos1");
    DeclareHistogram2D(DD_POS2, posBins, posBins, "Pspmt Pos2");
    DeclareHistogram1D(D_ENERGY_TRACE1, energyBins, "Energy1 from trace");
    DeclareHistogram1D(D_ENERGY_TRACE2, energyBins, "Energy2 from trace");
    DeclareHistogram1D(D_ENERGY_TRACE3, energyBins, "Energy3 from trace");
    DeclareHistogram1D(D_ENERGY_TRACE4, energyBins, "Energy4 from trace");
    DeclareHistogram1D(D_ENERGY_TRACED, energyBins, "EnergyD from trace");
    DeclareHistogram1D(D_ENERGY_TRACESUM,  energyBins, "Pspmt Sum");
    DeclareHistogram2D(DD_POS1_RAW_TRACE, mapBins, mapBins, "Pspmt pos Raw by Trace1");
    DeclareHistogram2D(DD_POS2_RAW_TRACE, mapBins, mapBins, "Pspmt pos Raw by Trace2");
    DeclareHistogram2D(DD_POS1_TRACE, posBins, posBins, "Pspmt pos by Trace1");
    DeclareHistogram2D(DD_POS2_TRACE, posBins, posBins, "Pspmt pos by Trace2");
    DeclareHistogram1D(D_QDC_TRACE1, energyBins, "Energy1 from QDC scaled by 10");
    DeclareHistogram1D(D_QDC_TRACE2, energyBins, "Energy2 from QDC scaled by 10");
    DeclareHistogram1D(D_QDC_TRACE3, energyBins, "Energy3 from QDC scaled by 10");
    DeclareHistogram1D(D_QDC_TRACE4, energyBins, "Energy4 from QDC scaled by 10");
    DeclareHistogram1D(D_QDC_TRACED, energyBins, "EnergyD from QDC scaled by 10");
    DeclareHistogram2D(DD_POS1_RAW_QDC, mapBins, mapBins, "Pspmt pos Raw by QDC");
    DeclareHistogram2D(DD_POS1_QDC, posBins, posBins, "Pspmt pos by QDC");
    DeclareHistogram2D(DD_DIRCAL1, mapBins, mapBins, "Map direction calibrated");
   
    
    // Energy resolutions 30-
    DeclareHistogram2D(DD_P1D_CHANNEL, energyBins,Bins, "Ch vs Dynode EChannel");
    DeclareHistogram2D(DD_P1D_TRACE, energyBins,Bins, "Ch vs Dynode ETrace");
    DeclareHistogram2D(DD_P1D_QDC, energyBins,Bins, "Ch vs Dynode QDC scaled by 10");
    DeclareHistogram2D(DD_P1D_QDCSUM, energyBins,Bins, "Ch vs QDCSum scaled by 40");
    // Energy res by correlation
    DeclareHistogram2D(DD_P1D_IMPLANT_CHE, energyBins,p1dBins, "[Implant] ch vs E(ch)");
    DeclareHistogram2D(DD_P1D_DECAY_CHE, energyBins,p1dBins,   "[Decay] ch vs E(ch)");
    DeclareHistogram2D(DD_P1D_IMPLANT_QDC, energyBins,p1dBins, "[Implant] ch vs E(QDC)");
    DeclareHistogram2D(DD_P1D_DECAY_QDC, energyBins,p1dBins, "[Decay] ch vs E(QDC)");

    DeclareHistogram2D(DD_POS_RAW_PROC, Bins, Bins, "Pos all in processor");
    DeclareHistogram2D(DD_POS_RAW_IMPLANT, Bins, Bins, "Gated by Implants");
    DeclareHistogram2D(DD_POS_RAW_DECAY, Bins, Bins, "Gated by Decays");
  
    DeclareHistogram2D(DD_MAP_IMPLANT, mapBins, mapBins, "2D MAP Implant direction calib.");
    DeclareHistogram2D(DD_MAP_DECAY, mapBins, mapBins, "2D MAP Decay direction calib.");


    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 0, energyBins, timeBins,
		       "2nd  DSSD Ty,Ex (10ns/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 1, energyBins, timeBins, 
		       "2nd DSSD Ty,Ex (100ns/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 2, energyBins, timeBins,
		       "2nd DSSD Ty,Ex (1us/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 3, energyBins, timeBins,
		       "2nd DSSD Ty,Ex (10us/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 4, energyBins, timeBins, 
		       "2nd DSSD Ty,Ex (100us/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 5, energyBins, timeBins,
		       "2nd DSSD Ty,Ex (1ms/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 6, energyBins, timeBins,
		       "2nd DSSD Ty,Ex (10ms/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 7, energyBins, timeBins,
		       "2nd DSSD Ty,Ex (100ms/ch)(xkeV)");
 

  
    // Time gated Decay P1D
    DeclareHistogram2D(DD_P1D_DECAY_TIME0, energyBins,p1dBins, "Decay time gated < 1  ms ");
    DeclareHistogram2D(DD_P1D_DECAY_TIME1, energyBins,p1dBins, "Decay time gated < 10 ms");
    DeclareHistogram2D(DD_P1D_DECAY_TIME2, energyBins,p1dBins, "Decay time gated < 100 ms");
    DeclareHistogram2D(DD_P1D_DECAY_TIME3, energyBins,p1dBins, "Decay time gated < 1 s");
    DeclareHistogram2D(DD_P1D_DECAY_TIME4, energyBins,p1dBins, "Decay time gated < 10 s");
    DeclareHistogram2D(DD_P1D_DECAY_TIME5, energyBins,p1dBins, "Decay time gated 5");


    // Trace
    DeclareHistogram1D(D_DIFF, traceBins, "Time diff between mean and maxch");
   
    DeclareHistogram2D(DD_SINGLE_TRACE, traceBins, traceBins2,"Single traces");
    DeclareHistogram2D(DD_DOUBLE_TRACE, traceBins, traceBins2,"Pileup traces");
    DeclareHistogram2D(DD_TRACE_POS, traceBins, traceBins2,"Position traces");
    DeclareHistogram2D(DD_TRACE_DYNODE, traceBins, traceBins2,"Dynode traces");

    DeclareHistogram2D(DD_TRACE_IMPLANT_ALL, traceBins, traceBins2,"Trace Implant All");
    DeclareHistogram2D(DD_TRACE_IMPLANT_DYNODE, traceBins, traceBins2,"Trace Implant dynode");
    DeclareHistogram2D(DD_TRACE_IMPLANT_POSITION, traceBins, traceBins2,"Trace Implant position");
    DeclareHistogram2D(DD_TRACE_IMPLANT_PILEUP, traceBins, traceBins2,"Trace Implant pileup");

    DeclareHistogram2D(DD_TRACE_DECAY_ALL, traceBins, traceBins2,"Trace Decay All");
    DeclareHistogram2D(DD_TRACE_DECAY_DYNODE, traceBins, traceBins2,"Trace Decay dynode");
    DeclareHistogram2D(DD_TRACE_DECAY_POSITION, traceBins, traceBins2,"Trace Decay position");
    DeclareHistogram2D(DD_TRACE_DECAY_PILEUP, traceBins, traceBins2,"Trace Decay pileup");

    
    DeclareHistogram2D(DD_MWPC,Bins,Bins,"MWPC in PSPMT Processor");
    DeclareHistogram2D(DD_MWPC_PSPMT,Bins,Bins,"MWPC_PSPMT in PSPMT Processor");
    DeclareHistogram2D(DD_MWPC_NOPSPMT,Bins,Bins,"MWPC_PSPMT in NoPSPMT Processor");
    DeclareHistogram2D(DD_TRACE_E_QDC, energyBins, energyBins,"TraceE vs QDC");


    DeclareHistogram2D(DD_CHE_REG, regBins, regBins,"ChE vs Regression");
    DeclareHistogram2D(DD_QDC_REG, regBins, regBins,"QDC vs Regression");
    DeclareHistogram2D(DD_QDC_REG_SEG, regBins, regBins,"QDC vs Regression seggate");
    DeclareHistogram2D(DD_QDC_REG_IMPLANT, regBins, regBins,"QDC vs Regression Implant");   
    DeclareHistogram2D(DD_QDC_REG_DECAY, regBins, regBins,"QDC vs Regression Decay");   
    DeclareHistogram2D(DD_QDC_REG_IMPLANT_SEG, regBins, regBins,"Imp Regression seg gated");   
    DeclareHistogram2D(DD_QDC_REG_DECAY_SEG, regBins, regBins,"Decay Regression gate");   
    DeclareHistogram2D(DD_REG12, regBins, regBins,"tau1 vs tau2");   
    DeclareHistogram2D(DD_REG12_IMPLANT, regBins, regBins,"Implant tau1 vs tau2");   
    DeclareHistogram2D(DD_REG12_DECAY, regBins, regBins,"Decay tau1 vs tau2");   
    DeclareHistogram2D(DD_QDC_REG1, regBins, regBins,"QDC vs REG1");   
    DeclareHistogram2D(DD_QDC_REG2, regBins, regBins,"QDC vs REG2");   
   
    
    DeclareHistogram2D(DD_TRACE_HIGHENE , traceBins, traceBins2,"Trace Decay High energy");
    DeclareHistogram2D(DD_TRACE_HIGHENE2, traceBins, traceBins2,"Trace Decay Alpha");
    DeclareHistogram2D(DD_TRACE_HIGHENE3, traceBins, traceBins2,"Trace Decay Beta");
    DeclareHistogram2D(DD_TRACE_HIGHENE4, traceBins, traceBins2,"Trace Decay HighQDC/Ech ratio gated");    

    DeclareHistogram2D(DD_ENE_QDC_DECAY, energyBins, energyBins,"[Decay] Ech vs QDC");
    DeclareHistogram2D(DD_ENE_QDC_IMPLANT, energyBins, energyBins,"[Implantation] Ech vs QDC");
    
    
    DeclareHistogram2D(DD_P1D_QDCCAL, energyBins,Bins, "QDC cal");

    DeclareHistogram2D(DD_QDCREG_SPECIFIC, regBins, regBins,"REG1 vs REG2 (Specific region)");   

}


bool PspmtProcessor::PreProcess(RawEvent &event){
    if (!EventProcessor::PreProcess(event))
      return false;
    
    static const vector<ChanEvent*> &pspmtEvents = sumMap["pspmt"]->GetList();
    
    data_.Clear();
    
    double q1  =0,q2  =0,q3  =0,q4  =0,qd  =0;
    double qdc1=0,qdc2=0,qdc3=0,qdc4=0,qdcd=0;
    double tre1=0,tre2=0,tre3=0,tre4=0,tred=0;
    
    double qright=0,qleft=0,qtop=0,qbottom=0,qsum=0;
    double xright=0,xleft=0,ytop=0,ybottom=0;
    
    double qtre_r=0,qtre_l=0,qtre_t=0,qtre_b=0,qtre_s=0;
    double xtre_r=0,xtre_l=0,ytre_t=0,ytre_b=0;
    
    double qqdc_r=0,qqdc_l=0,qqdc_t=0,qqdc_b=0,qqdc_s=0;
    double xqdc_r=0,xqdc_l=0,yqdc_t=0,yqdc_b=0;
    
    double pxright=0,pxleft=0,pytop=0,pybottom=0;
    double pxtre_r=0,pxtre_l=0,pytre_t=0,pytre_b=0;
   
    double diff;
 
    // tentatively local params //
    double threshold=250;
    double slope=0.0606;
    double intercept=10.13;
    static int traceNum=-1;
    
    for (vector<ChanEvent*>::const_iterator it = pspmtEvents.begin();
         it != pspmtEvents.end(); it++) {
        
        ChanEvent *chan   = *it;
        string subtype    = chan->GetChanID().GetSubtype();
        int    ch         = chan->GetChanID().GetLocation();
        double calEnergy  = chan->GetCalEnergy();
	Trace trace       = chan->GetTrace();
        double trace_energy;
        double trace_time;
        double baseline;
        double qdc;	
       
	if(trace.HasValue("filterEnergy")){
	  
            traceNum++;   	  
            trace_time    = trace.GetValue("filterTime");
            trace_energy  = trace.GetValue("filterEnergy");
            baseline      = trace.DoBaseline(2,20);
            qdc           = trace.DoQDCSimple(20,140);
	    
	    if(ch==0){
                qdc1 = qdc/10;
                tre1 = trace_energy;
                plot(D_QDC_TRACE1,qdc1);
                plot(D_ENERGY_TRACE1,tre1);
            }else if(ch==1){
                qdc2 = qdc/10;
                tre2 = trace_energy; 
                plot(D_QDC_TRACE2,qdc2);
                plot(D_ENERGY_TRACE2,tre2);
            }else if(ch==2){
                qdc3 = qdc/10;
                tre3 = trace_energy; 
                plot(D_QDC_TRACE3,qdc3);
                plot(D_ENERGY_TRACE3,tre3);
            }else if(ch==3){
                qdc4 = qdc/10;
                tre4 = trace_energy; 	  
                plot(D_QDC_TRACE4,qdc4);
                plot(D_ENERGY_TRACE4,tre4);
            }else if(ch==4){
                qdcd = qdc;
                tred = trace_energy; 
		plot(D_QDC_TRACED,qdcd/10);
                plot(D_ENERGY_TRACED,tred);
		plot(DD_TRACE_E_QDC,tred,qdcd/10);
	    }
        }

        if(ch==0){
            q1 = calEnergy;
            plot(D_RAW1,q1);
        }else if(ch==1){
            q2 = calEnergy;
            plot(D_RAW2,q2);
        }else if(ch==2){
            q3 = calEnergy;
            plot(D_RAW3,q3);
        }else if(ch==3){
            q4 = calEnergy;
            plot(D_RAW4,q4);
        }else if(ch==4){
            qd = calEnergy;
            plot(D_RAWD,qd);
        }
        
        if(q1>0 && q2>0 && q3>0 && q4>0){
            
	  qtop    = (q1+q2)/2;
	  qleft   = (q2+q3)/2;
	  qbottom = (q3+q4)/2;
	  qright  = (q4+q1)/2;
          
            qsum    = (q1+q2+q3+q4)/2;
            xright  = (qright/qsum)*512+100;
            xleft   = (qleft/qsum)*512+100;
            ytop    = (qtop/qsum)*512+100;
            ybottom = (qbottom/qsum)*512+100;
            plot(D_SUM,qsum);

        }
        
        if(tre1>0 && tre2>0 && tre3>0 && tre4>0 ){
            qtre_t=(tre1+tre2)/2;
            qtre_l=(tre2+tre3)/2;
            qtre_b=(tre3+tre4)/2;
            qtre_r=(tre4+tre1)/2;
            qtre_s=(tre1+tre2+tre3+tre4)/2;
            
            xtre_r=(qtre_r/qtre_s)*512+100;
            xtre_l=(qtre_l/qtre_s)*512+100;
            ytre_t=(qtre_t/qtre_s)*512+100;
            ytre_b=(qtre_b/qtre_s)*512+100;
            
            pxtre_r = trunc(slope*xtre_r-intercept);
            pxtre_l = trunc(slope*xtre_l-intercept);
            pytre_t = trunc(slope*ytre_t-intercept);
            pytre_b = trunc(slope*ytre_b-intercept);
                        
            plot(D_ENERGY_TRACESUM,qtre_s);
	    
            if(tre1>threshold && tre2>threshold && tre3>threshold && tre4>threshold ){
	      plot(DD_POS1_RAW_TRACE,xtre_r,ytre_t);
	      plot(DD_POS2_RAW_TRACE,xtre_l,ytre_b);
	      plot(DD_POS1_TRACE,pxtre_r,pytre_t);
	      plot(DD_POS2_TRACE,pxtre_l,pytre_b);
            }    
        }
        
        if(qdc1>0 && qdc2>0 && qdc3>0 && qdc4>0 ){
            qqdc_t=(qdc1+qdc2)/2;
            qqdc_l=(qdc2+qdc3)/2;
            qqdc_b=(qdc3+qdc4)/2;
            qqdc_r=(qdc4+qdc1)/2;
            qqdc_s=(qqdc_t+qqdc_l+qqdc_b+qqdc_r)/2;
            
            xqdc_r=(qqdc_r/qqdc_s)*512+100;
            xqdc_l=(qqdc_l/qqdc_s)*512+100;
            yqdc_t=(qqdc_t/qqdc_s)*512+100;
            yqdc_b=(qqdc_b/qqdc_s)*512+100;

	    plot(D_ENERGY_TRACESUM,qqdc_s);
        }
        
        if(q1>threshold && q2>threshold && q3>threshold && q4>threshold ){
            pxleft   = trunc(slope*xleft-intercept);
            pxright  = trunc(slope*xright-intercept);
            pytop    = trunc(slope*ytop-intercept);
            pybottom = trunc(slope*ybottom-intercept);
            
            plot(DD_POS1_RAW,xright,ytop);
            plot(DD_POS2_RAW,xleft,ybottom);
            plot(DD_POS1,pxright,pytop);
            plot(DD_POS2,pxleft,pybottom);
	    
	}
    } // end of channel event
    
    EndProcess();
    return(true);
}




bool PspmtProcessor::Process(RawEvent &event){
  if (!EventProcessor::Process(event))
    return false;
  
  vector<ChanEvent*> pspmtEvents = 
    event.GetSummary("pspmt:pspmt", true)->GetList();
  vector<ChanEvent*> naiEvents = 
    event.GetSummary("nai:nai", true)->GetList();
  vector<ChanEvent*> mwpcEvents = 
    event.GetSummary("mcp:1time", true)->GetList();
  vector<ChanEvent*> mwpcEEvents = 
    event.GetSummary("mcp:1position1", true)->GetList();
  
  bool has_pspmt   = false;
  bool has_mwpc    = false;
  bool has_nai     = false;
  bool has_implant = false;
  bool has_decay   = false;
  bool has_veto    = false;
  bool has_pileup  = false;
  bool has_bigqdc  = false;
  
  int  mult_pspmt = event.GetSummary("pspmt",true)->GetMult();
  int  mult_mwpc  = event.GetSummary("mcp",true)->GetMult();
  int  mult_nai   = event.GetSummary("nai",true)->GetMult();
  
  double id[600];
  double res;
  double peak[600];
  double calib[600];
  double ampeak=5458.5;
  ifstream ifs("calibprm.txt");
  
  
  for(int i=0;i<600;i++){
    ifs >> id[i] >> peak[i] >> res; 
    if(peak[i]!=0){
      calib[i] = abs(ampeak/peak[i]);
    }else{
      calib[i]=0;
    }
  }
  
  if(mult_pspmt==5){
    has_pspmt=true;
  }
  if(mult_pspmt<5){
    has_pspmt=false;
  }
  if(mult_mwpc>0) {
    has_mwpc=true;
  }
  if(mult_nai>0){
    has_nai=true;
  }
  if(has_mwpc && has_pspmt){
    has_implant = true;
  }
  if(!has_mwpc && has_pspmt){
    has_decay   = true;
  }
  if(has_nai){
    has_veto    = true;  
  }
  
  // Virtual switches for debugging //
  //has_pspmt    = true;
  //has_mwpc     = true;
  //has_nai      = false;
  //has_implant  = true;
  //has_decay    = false;
  //has_veto     = true;
  // End of virtual switches  ///////
  
  double q1=0,q2=0,q3=0,q4=0,qd=0;
  double qtop=0,qleft=0,qbottom=0,qright=0;
  double qsum=0;
  double xright=0,xleft=0,ytop=0,ybottom=0;
  int px_r=-1,px_l=-1,py_t=-1,py_b=-1;
  double tre1=0,tre2=0,tre3=0,tre4=0,tred=0;
  double qdc1=0,qdc2=0,qdc3=0,qdc4=0,qdcd=0,qdcs=0;
  double qdcd_cal=0;

  double qdc_top=0,qdc_left=0,qdc_bottom=0,qdc_right=0;
  double yqdc_top=0,xqdc_left=0,yqdc_bottom=0,xqdc_right=0;
  double pyqdc_top=0,pxqdc_left=0,pyqdc_bottom=0,pxqdc_right=0;
  
  double xcal=0,ycal=0;
  double xcal2=0,ycal2=0;
  static int traceNum=0;
  static int traceNumPosition=0;
  static int traceNumPositionDecay=0;
  static int traceNumPositionImplant=0;
  static int traceNumDynode=0;
  static int traceNumDynodeDecay=0;
  static int traceNumDynodeImplant=0;
  static int traceNumSecond=0;
  static int traceNumSecondImplant=0;
  static int traceNumSecondDecay=0;
  static int traceNumImplant=0;
  static int traceNumDecay=0;
  static int traceNumHigh=0;
  static int traceNumHigh2=0;
  static int traceNumAlpha=0;
  static int traceNumBeta=0;
  static int traceNumbigqdc=0;
  
  int p1d;
  
  double threshold=0;
  // For position calib at PSPMT
  double slope=0.0606;
  double intercept=10.13;
  // 
  double xslope=0.0623;
  double xoffset=-10.791;
  double yslope=0.0601;
  double yoffset=-9.780;
  double offset_mirror=341;
  double offset_mirror2=365;
  double QDCHIGHGATE=2000;
  double QDCLOWGATE=800;
  
  double QDCHIGHALPHA=330;
  double QDCLOWALPHA=270;

  double QDCHIGHBETA=180;
  double QDCLOWBETA=100;
  
  double x1=0,x2=251;
  double y1=250,y2=510;
  double a_reg,b_reg;
  
 
  //a_reg = (y2-y1)/(x2-x1);
  //b_reg = y1;
  a_reg = 1;
  b_reg = 0;
  
  
  double static pspmttime;
  double static mwpctime;
  double mwpcene;
  int pspmtch=-1;
  int numpulse=0;
  int mwpcch;
  double regression=0;
  double regression2=0;
  int mwpcCh;
  double  mwpcE;
  Trace traceD;
  
  // in processor //  
  for (vector<ChanEvent*>::iterator itm = mwpcEvents.begin();
       itm != mwpcEvents.end();
       ++itm) {
    mwpctime = (*itm)->GetTime();
    mwpcene  = (*itm)->GetCalEnergy();
    mwpcch   = (*itm)->GetChanID().GetLocation();
    
  }
 for (vector<ChanEvent*>::iterator itm = mwpcEEvents.begin();
       itm != mwpcEEvents.end();
       ++itm) {
    
    mwpcE    = (*itm)->GetCalEnergy();
    mwpcCh   = (*itm)->GetChanID().GetLocation();
    
  }
 
 
 plot(DD_MWPC,mwpcene/10,mwpcE);
 if(has_pspmt){
   plot(DD_MWPC_PSPMT,mwpcene/10,mwpcE);
 }else if(!has_pspmt){
   plot(DD_MWPC_NOPSPMT,mwpcene/10,mwpcE);
 }
   
 
 
 for (vector<ChanEvent*>::const_iterator it = pspmtEvents.begin();
       it != pspmtEvents.end(); it++) {
        
    ChanEvent *chan   = *it;
    int ch            = chan->GetChanID().GetLocation();
    pspmtch           = ch;
    pspmttime         = chan->GetTime();
    double energy     = chan->GetCalEnergy();
    Trace  trace      = chan->GetTrace();        
    
    if(ch==0){
      q1 = energy;
    }else if(ch==1){
      q2 = energy;
    }else if(ch==2){
      q3 = energy;
    }else if(ch==3){
      q4 = energy;
    }else if(ch==4){
      qd = energy;
      traceD = chan->GetTrace();
    }
    
    if(trace.HasValue("filterEnergy")){
      traceNum++;   	  
      
      double trace_energy;
      double trace_time;
      double baseline;
      double qdc;
      double ch_max;
      trace_energy  = trace.GetValue("filterEnergy");
      trace_time    = trace.GetValue("filterTime");
      baseline      = trace.DoBaseline(2,20);
      qdc           = trace.DoQDCSimple(20,140);
      numpulse      = trace.GetValue("numPulses");
     
      //      cout << regression << " " << regression2 << endl;
     
      if(ch==0){
	qdc1 = qdc;
	tre1 = trace_energy;
      }else if(ch==1){
	qdc2 = qdc;
	tre2 = trace_energy; 
      }else if(ch==2){
	qdc3 = qdc;
	tre3 = trace_energy; 
      }else if(ch==3){
	qdc4 = qdc;
	tre4 = trace_energy; 	  
      }else if(ch==4){
	qdcd = qdc;
	tred = trace_energy; 
	has_pileup=trace.ScanPileup(1,140);
	regression    = abs(10000*trace.DeduceRegression(20,140,0));
	regression2   = abs(10000*trace.DeduceRegression(20,140,1));
      }
    }
    
    
    //Trace stuffs
    for(vector<int>::iterator ittr = trace.begin();ittr != trace.end();ittr++){
      plot(DD_SINGLE_TRACE,ittr-trace.begin(),traceNum,*ittr);
      if(has_implant){
	plot(DD_TRACE_IMPLANT_ALL,ittr-trace.begin(),traceNumImplant,*ittr);
      }else if(has_decay && !has_veto){
	plot(DD_TRACE_DECAY_ALL,ittr-trace.begin(),traceNumDecay,*ittr);
      }
      if(pspmtch==4){	
	plot(DD_TRACE_DYNODE,ittr-trace.begin(),traceNumDynode,*ittr);
	
	if(has_decay && !has_veto){
	  if(qdcd_cal<QDCHIGHGATE && qdcd_cal>QDCLOWGATE){
	    
	    plot(DD_TRACE_HIGHENE,ittr-trace.begin(),traceNumHigh,*ittr);
	    plot(DD_QDCREG_SPECIFIC,qdcd_cal,regression);
	    
	    if(has_bigqdc){
	      plot(DD_TRACE_HIGHENE4,ittr-trace.begin(),traceNumbigqdc,*ittr);
	    }
	  }
	  
	  if(qdcd/10<QDCHIGHALPHA && qdcd_cal>QDCLOWALPHA){
	    plot(DD_TRACE_HIGHENE2,ittr-trace.begin(),traceNumAlpha,*ittr);
	  }
	  
	  if(qdcd/10<QDCHIGHBETA && qdcd_cal>QDCLOWBETA){
	    plot(DD_TRACE_HIGHENE3,ittr-trace.begin(),traceNumBeta,*ittr);
	  }
	  
	}
	
	
	if(has_implant){
	  plot(DD_TRACE_IMPLANT_DYNODE,ittr-trace.begin(),traceNumDynodeImplant,*ittr);
	}else if(has_decay && !has_veto){
	  plot(DD_TRACE_DECAY_DYNODE,ittr-trace.begin(),traceNumDynodeDecay,*ittr);
	}
	
	if(has_pileup){
	  plot(DD_DOUBLE_TRACE,ittr-trace.begin(),traceNumSecond,*ittr);
	  if(has_implant){
	    plot(DD_TRACE_IMPLANT_PILEUP,ittr-trace.begin(),traceNumSecondImplant,*ittr);
	  }else if(has_decay  && !has_veto){
	    plot(DD_TRACE_DECAY_PILEUP,ittr-trace.begin(),traceNumSecondDecay,*ittr);
	  }
	}
      }
      if(pspmtch<4){
	plot(DD_TRACE_POS,ittr-trace.begin(),traceNumPosition,*ittr);
	if(has_implant){
	  plot(DD_TRACE_IMPLANT_POSITION,ittr-trace.begin(),traceNumPositionImplant,*ittr);
	}else if(has_decay  && !has_veto){
	  plot(DD_TRACE_DECAY_POSITION,ittr-trace.begin(),traceNumPositionDecay,*ittr);
	}
      }
    
    
    if(pspmtch<4){
      traceNumPosition++;
      if(has_decay  && !has_veto){
	traceNumPositionDecay++;
      }else if(has_implant){
	traceNumPositionImplant++;
      }
    }
    
    if(pspmtch==4 && has_decay && !has_veto && qdcd_cal<QDCHIGHGATE && qdcd/10>QDCLOWGATE){
      traceNumHigh++;
      if(has_bigqdc){
	traceNumbigqdc++;
      }
    }
    if(pspmtch==4 && has_decay && !has_veto && qdcd_cal<QDCHIGHALPHA && qdcd/10>QDCLOWALPHA){
      traceNumAlpha++;
    }
    if(pspmtch==4 && has_decay && !has_veto && qdcd_cal<QDCHIGHBETA && qdcd/10>QDCLOWBETA){
      traceNumBeta++;
    }
    
    if(pspmtch==4){
      traceNumDynode++;
      if(has_decay && !has_veto){
	traceNumDynodeDecay++;
      }else if(has_implant){
	traceNumDynodeImplant++;
      }
      
    }
    if(has_implant){
      traceNumImplant++;
    }
    if(has_decay  && !has_veto){
      traceNumDecay++;
    }
    if(has_pileup){
      traceNumImplant++;
    }
    if(has_pileup && has_implant && pspmtch==4){
      traceNumSecondImplant++;
    }
    if(has_pileup && has_decay && !has_veto && pspmtch==4){
      traceNumSecondDecay++;
    }

    }

  } // end of channel event
   

  qtop    = (q1+q2)/2;
  qleft   = (q2+q3)/2;
  qbottom = (q3+q4)/2;
  qright  = (q4+q1)/2;
  qsum    = (q1+q2+q3+q4)/2;
  
  qdc_top    = (qdc1+qdc2)/2;
  qdc_left   = (qdc2+qdc3)/2;
  qdc_bottom = (qdc3+qdc4)/2;
  qdc_right  = (qdc4+qdc1)/2;
  qdcs=(qdc1+qdc2+qdc3+qdc4)/2;

  xright  = (qright/qsum)*512+100;
  xleft   = (qleft/qsum)*512+100;
  ytop    = (qtop/qsum)*512+100;
  ybottom = (qbottom/qsum)*512+100;

  xqdc_right  = (qdc_right/qdcs)*512+100;
  xqdc_left   = (qdc_left/qdcs)*512+100;
  yqdc_top    = (qdc_top/qdcs)*512+100;
  yqdc_bottom = (qdc_bottom/qdcs)*512+100;
  
  px_r = trunc(slope*xright-intercept);
  px_l = trunc(slope*xleft-intercept);
  py_t = trunc(slope*ytop-intercept);
  py_b = trunc(slope*ybottom-intercept);
  
  pxqdc_right  = trunc(xslope*xqdc_right+xoffset);
  pxqdc_left   = trunc(xslope*xqdc_left+xoffset);
  pyqdc_top    = trunc(yslope*yqdc_top+yoffset);
  pyqdc_bottom = trunc(yslope*yqdc_bottom+yoffset);

  xcal  = yqdc_top;
  ycal  = -1*(xqdc_right-offset_mirror)+offset_mirror;
  xcal2 = -1*(yqdc_bottom-offset_mirror2)+offset_mirror2;
  ycal2 = xqdc_left;
  p1d     = pxqdc_right + 24*pyqdc_top;
  
  if(has_decay && !has_veto){
    plot(DD_ENE_QDC_DECAY,qd,qdcd_cal);
  }
  if(has_implant){
    plot(DD_ENE_QDC_IMPLANT,qd,qdcd_cal);
  }
  
  if(p1d>=0 && p1d<576){
    qdcd_cal = calib[p1d]*qdcd/100;
    plot(DD_P1D_QDCCAL,qdcd_cal,p1d);
  }

  if(qdc1>0 && qdc2>0 && qdc3>0 && qdc4>0){
    
    plot(DD_POS1_RAW_QDC,xqdc_right,yqdc_top);
    plot(DD_POS1_QDC,pxqdc_right,pyqdc_top);
    plot(DD_DIRCAL1,xcal,ycal);
    
    plot(DD_CHE_REG,qd,regression);
    plot(DD_QDC_REG,qdcd_cal,regression);
    plot(DD_QDC_REG1,qdcd_cal,regression);
    plot(DD_QDC_REG2,qdcd_cal,regression2);
    
    if(has_implant){
      plot(DD_MAP_IMPLANT,xcal,ycal);
      plot(DD_QDC_REG_IMPLANT,qdcd_cal,regression);
    }if(has_decay  && !has_veto){
      plot(DD_MAP_DECAY,xcal,ycal);
      plot(DD_QDC_REG_DECAY,qdcd_cal,regression);
      plot(DD_QDC_REG_DECAY_SEG,qdcd_cal,regression);
    }
    
  }
  
  plot(DD_P1D_CHANNEL,qd,p1d);
  plot(DD_P1D_TRACE,tred,p1d);
  plot(DD_P1D_QDC,qdcd_cal,p1d);
  plot(DD_P1D_QDCSUM,qdcs/40,p1d);
  plot(DD_REG12,regression,regression2);
  
  if(q1>threshold && q2>threshold && q3>threshold && q4>threshold){
    
      plot(DD_POS_RAW_PROC,xright,ytop);
      plot(DD_POS_RAW_IMPLANT,xright,ytop);
      plot(DD_P1D_IMPLANT_CHE,qd,p1d);
      plot(DD_P1D_IMPLANT_QDC,qdcd_cal,p1d);
      plot(DD_REG12_IMPLANT,regression,regression2);
  }
    
  if(has_decay && !has_veto){
    plot(DD_POS_RAW_DECAY,xright,ytop);
    plot(DD_P1D_DECAY_CHE,qd,p1d);
    plot(DD_P1D_DECAY_QDC,qdcd_cal,p1d);
    plot(DD_REG12_DECAY,regression,regression2);
  }

  
  
   // checker
   //   if(q1>0 && q2>0 && q3>0 && q4>0 ){
    //   if(has_decay){
     /*     cout << "[Before Correlation] \t"
          << " x \t" << px_r 
	  << " y \t" << py_t 
	  << " qd \t" << qd  
	  << " pspmttime \t" << pspmttime 
	  << " mwpctime \t"  << mwpctime 
	  << " has_imp \t"   << has_implant 
	  << " has_decay \t" << has_decay
	  << " has_veto \t"  << has_veto << endl;
        }
     */
	//}
   //////////////////////
   // checker 2 for debugging  
   //static int correlation_maker=0;
   //correlation_maker++;
   // cout << "[correlation maker]"<< correlation_maker << endl;
   /*
   if(correlation_maker%2==0){
     has_implant = true;
     has_decay   = false;
   }
   if(correlation_maker%2==1){
     has_implant = false;
     has_decay   = true;
   }
   */
   //// end of checker 2
   //////////////////////

   // Correlation stuffs
  if(q1>threshold && q2>threshold && q3>threshold && q4>threshold ){
    PspmtEvent ev(qdcd_cal,pspmttime,mwpctime,has_implant,has_decay,has_veto);
    AddEvent(ev,px_r,py_t);
  }
  
  
   
  EndProcess();
  return(true);
}

bool PspmtProcessor::AddEvent(PspmtEvent& event,int x,int y){
  
  int size_x=24;
  int size_y=24;
  
  if(x<0 || x>=size_x){
    return false;
  }
  if(y<0 || y>=size_y){
    return false;
  }
  
  bool has_beam  = event.get_is_beam();
  bool has_decay = event.get_is_decay();
 
  //In case of getting heavyIons, flush it and refill it
  if (has_beam){
    FlushChain(x, y);
  }
 
  pixels_[x][y].push_back(event);
 
  // In case of getting decay events, flush it
  if (has_decay){
    FlushChain(x, y);
  }
  
  
  return true;
}
bool PspmtProcessor::FlushChain(int x,int y){
  
  unsigned chain_size = pixels_[x][y].size();
  if(chain_size<1){
    pixels_[x][y].clear();
    return false;
  }
  
  int p1d=x+24*y; 
  PspmtEvent ev_first = pixels_[x][y].front();
  bool first_is_beam   = ev_first.get_is_beam();
  // bool first_is_decay  = ev_first.get_is_decay();
  
  if(!first_is_beam){
    pixels_[x][y].clear();
    return false;
  }
  
  int alphas = 0;
  double alphaE[6]={0};
  double alphaTime[6]={0};
  double dt[6];
  double BeamE=0,BeamTime=0;
  int pix_counter=0;  
 

  for (deque<PspmtEvent>::iterator it = pixels_[x][y].begin();
       it != pixels_[x][y].end();
       ++it) { 	
    
    pix_counter++;
    bool b_ion    = (*it).get_is_beam();
    bool b_decay  = (*it).get_is_decay();
    bool b_veto   = (*it).get_is_veto();
    double energy = (*it).get_ene_pspmt();
    double time   = (*it).get_time_pspmt()*(Globals::get()->clockInSeconds()); 
    double timecheck = (*it).get_time_pspmt();
   
    
    if(b_ion) { 
      BeamE=energy;
      BeamTime=time;
    }    	
    if(b_decay & !b_veto) {
      alphas += 1;
      if(alphas <= 6) {
	alphaE[alphas]=energy;
	alphaTime[alphas] = time; 
      }
    }
    
    
    if(BeamTime>0 && alphaTime[1]>0){
      const unsigned int NumGranularities = 8;
      for (unsigned int i = 0; i < NumGranularities; i++) {
	const double timeResolution[NumGranularities] = 
	/// 10ns, 100ns,  1us,  10us, 100us, 1ms, 10ms, 100ms
	  {10e-9, 100e-9, 1e-6, 10e-6, 100e-6, 1e-3, 10e-3, 100e-3};
	dt[i]=100000000*(alphaTime[1]-BeamTime)*(Globals::get()->clockInSeconds()/timeResolution[i]);
	
	plot(DD_ENERGY_DECAY_TIME_GRANX+i,alphaE[1],dt[i]);
	
	if(i==4){ // 100us/ch,  1ms/10ch, 10ms/100ch
	  if(dt[i]<10){ // 1ms
	    plot(DD_P1D_DECAY_TIME0,alphaE[1],p1d);
	  }
	  if(dt[i]<100){ // 10ms
	    plot(DD_P1D_DECAY_TIME1,alphaE[1],p1d);
	  }
	  if(dt[i]<1000){ // 100ms
	    plot(DD_P1D_DECAY_TIME2,alphaE[1],p1d);
	  }
	  if(dt[i]<10000){ // 1s
	    plot(DD_P1D_DECAY_TIME3,alphaE[1],p1d);
	  }
	  if(dt[i]<100000){ // 10s
	    plot(DD_P1D_DECAY_TIME4,alphaE[1],p1d);
	  }
	  
	}
      }
    }
  }
  
  pixels_[x][y].clear();
  
  return true;
}
